package com.java_podio.code_gen;

import java.io.File;
import java.io.IOException;
import java.util.Date;

import com.google.common.base.CaseFormat;
import com.podio.app.Application;
import com.podio.app.ApplicationField;
import com.sun.codemodel.JBlock;
import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JVar;

public class CodeGenerator {

	public CodeGenerator() {
	}

	public void generateCode(Application app) {
		printApp(app);

		JCodeModel jCodeModel = new JCodeModel();
		JPackage jp = jCodeModel._package("com.podio.generated");

		try {

			JDefinedClass jc = jp._class(app.getConfiguration().getName());

			JDocComment jDocComment = jc.javadoc();
			jDocComment.add("Wrapper for app with id=" + app.getId() + "\nGenerated by java-podio-code-gen.");
			
			//APP ID:
			jc.field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL, Integer.class, "APP_ID", JExpr.lit(app.getId()));			

			//TODO mark deleted elements as deprecated?!
			
			//TODO add field ids?
			
			//Add podio id field:
			JFieldVar podioId = jc.field(JMod.PROTECTED, Integer.class, "podioId");
			podioId.javadoc().add("This represents the internal Podio id of the item.");

			for (ApplicationField f : app.getFields()) {
				String name = f.getExternalId();
				Class<? extends Object> type = getType(f);

				// add member:
				JFieldVar var = jc.field(JMod.PROTECTED, type, getLowerCamelCase(name));

				// add setter:
				JMethod getter = jc.method(JMod.PUBLIC, type, "get" + getUpperCamelCase(name));
				JBlock returnBlock = getter.body();
				returnBlock._return(var);

				// add getter:
				JMethod setter = jc.method(JMod.PUBLIC, type, "set" + getUpperCamelCase(name));
				JVar param = setter.param(type, getLowerCamelCase(name));
				JBlock setterBlock = setter.body();
				setterBlock.assign(var, param);
			}

			// /* Adding method to the Class which is public static and returns com.somclass.AnyXYZ.class */
			// String mehtodName = "myFirstMehtod";
			// JMethod jmCreate = jc.method(JMod.PUBLIC | JMod.STATIC, com.somclass.AnyXYZ.class, "create" + mehtodName);
			//
			// /* Addign java doc for method */
			// jmCreate.javadoc().add("Method Level Java Docs");
			//
			// /* Adding method body */
			// JBlock jBlock = jmCreate.body();
			//
			// /* Defining method parameter */
			// JType jt = getTypeDetailsForCodeModel(jCodeModel, "Unsigned32");
			// if (jt != null) {
			// jmCreate.param(jt, "data");
			// } else {
			// jmCreate.param(java.lang.String.class, "data");
			// }
			//
			// /* Defining some class Variable in mthod body */
			// JClass jClassavpImpl = jCodeModel.ref(com.somclass.AnyXYZ.class);
			// jvarAvpImpl = jBlock.decl(jClassavpImpl, "varName");
			// jvarAvpImpl.init(JExpr._new(jClassavpImpl));
			//
			//
			// /* Adding some direct statement */
			// jBlock.directStatement("varName.setCode(100);");
			//
			// /* returning varibalbe */
			// jBlock._return(jvarAvpImpl);

			/* Building class at given location */
			// jCodeModel.build(new File("generated/src"));
			jCodeModel.build(new File("."));

		} catch (JClassAlreadyExistsException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private String getLowerCamelCase(String name) {
		return CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL, name.toLowerCase());
	}

	private String getUpperCamelCase(String name) {
		return CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, name.toLowerCase());
	}

	private Class<? extends Object> getType(ApplicationField f) {
		Class<? extends Object> type;
		if (f.getType().name().equalsIgnoreCase("text")) {
			type = String.class;
		} else if (f.getType().name().equalsIgnoreCase("number")) {
			type = Double.class;
		} else if (f.getType().name().equalsIgnoreCase("money")) {
			type = Double.class; // TODO: one might think of a special currency class.
		} else if (f.getType().name().equalsIgnoreCase("category")) {
			type = Integer.class; // TODO: one might think of generating a corresponding Enum.
		} else if (f.getType().name().equalsIgnoreCase("question")) {
			type = Boolean.class;
		} else if (f.getType().name().equalsIgnoreCase("calculation")) {
			type = Double.class; // TODO: correct?
		} else if (f.getType().name().equalsIgnoreCase("app")) {
			// Store reference to item:
			type = Integer.class; // TODO: one might think of linking generated classes..
		} else if (f.getType().name().equalsIgnoreCase("date")) {
			type = Date.class;
		} else if (f.getType().name().equalsIgnoreCase("contact")) {
			type = Object.class; //TODO
		} else {
			System.err.println("Unexpected type: " + f.getType().name());
			type = Object.class;
		}
		return type;
	}

	public static void printApp(Application app) {
		System.out.println("AppId=" + app.getId());
		System.out.println("AppExternalId=" + app.getConfiguration().getExternalId());
		System.out.println("AppName=" + app.getConfiguration().getName());
		System.out.println("AppItemName=" + app.getConfiguration().getItemName());
		System.out.println("FIELDS:");
		for (ApplicationField appField : app.getFields()) {
			printAppField(appField);
			System.out.println();
		}
	}

	public static void printAppField(ApplicationField appField) {
		System.out.println("FieldId=" + appField.getId());
		System.out.println("FieldExternalId=" + appField.getExternalId());
		System.out.println("FieldDescription=" + appField.getConfiguration().getDescription());
		System.out.println("FieldLabel=" + appField.getConfiguration().getLabel());
		System.out.println("FieldIsRequired=" + appField.getConfiguration().isRequired());
		if (appField.getConfiguration().getSettings() != null) {
			System.out.println("FieldAllowedValues=" + appField.getConfiguration().getSettings().getAllowedValues());
			System.out.println("FieldAllowedCurrencies=" + appField.getConfiguration().getSettings().getAllowedCurrencies());
			System.out.println("FieldReferenceableTypes=" + appField.getConfiguration().getSettings().getReferenceableTypes());
			System.out.println("FieldTextFieldSize=" + appField.getConfiguration().getSettings().getSize());
		}
		System.out.println("FieldType=" + appField.getType().toString());

	}

}
