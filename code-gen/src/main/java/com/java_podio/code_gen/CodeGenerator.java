package com.java_podio.code_gen;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import com.google.common.base.CaseFormat;
import com.podio.app.Application;
import com.podio.app.ApplicationField;
import com.podio.item.FieldValuesUpdate;
import com.podio.item.FieldValuesView;
import com.podio.item.Item;
import com.podio.item.ItemCreate;
import com.podio.item.ItemUpdate;
import com.sun.codemodel.JBlock;
import com.sun.codemodel.JCase;
import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JExpression;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JForEach;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JSwitch;
import com.sun.codemodel.JType;
import com.sun.codemodel.JVar;

public class CodeGenerator {

	private static final String FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC = "Field is of unsupportet type and is not parsed, hence always {@code null}!";

	final JCodeModel jCodeModel;

	JFieldVar podioDateFormatter;

	/**
	 * Constructor - constructing an object from an {@link Item}.
	 */
	JMethod constructorFromItem;

	/**
	 * Sets values from a given {@link Item}.
	 */
	JMethod setValuesFromItem;

	/**
	 * Constructs a {@link ItemCreate} from current instance. As
	 * {@link ItemCreate} inherits from {@link ItemUpdate}, the result can be
	 * used for updates as well.
	 */
	JMethod getItemCreate;

	private JVar itemCreateResult;

	private JVar itemCreateFieldValues;

	JDefinedClass currencyClass;

	public CodeGenerator() {
		jCodeModel = new JCodeModel();
	}

	// TODO add Enum for categorys

	// TODO add tag handling

	// TODO store original item?!

	// TODO move fromItem from constructor to method

	// TODO Add link to elment?

	// TODO id, externalId, revision, ... to getItemCreate

	public void generateCode(Application app) {
		printApp(app);

		JPackage jp = jCodeModel._package("com.podio.generated");

		try {

			currencyClass = new CurrencyGenerator(jCodeModel, jp).generateCurrencyClass();

			String className = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, app.getConfiguration().getName()
					.toLowerCase());
			JDefinedClass jc = jp._class(className);

			JDocComment jDocComment = jc.javadoc();
			jDocComment.add("Wrapper for podio app '" + app.getConfiguration().getName() + "' (id=" + app.getId()
					+ ")\nGenerated by java-podio-code-gen.");

			// APP ID:
			jc.field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL, Integer.class, "APP_ID", JExpr.lit(app.getId()));
			// APP External ID:
			jc.field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL, String.class, "APP_EXTERNAL_ID", JExpr.lit(app
					.getConfiguration().getExternalId() == null ? "" : app.getConfiguration().getExternalId()));

			podioDateFormatter = jc.field(JMod.PROTECTED | JMod.STATIC | JMod.FINAL, SimpleDateFormat.class,
					"PODIO_DATE_FORMATTER", JExpr.direct("new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")"));

			// TODO mark deleted elements as deprecated?!

			// TODO add podio item title?!

			// TODO add field ids (id/externalId)?

			// setValuesFromItem method (needs to be defined before
			// itemConstructor?!):
			setValuesFromItem = jc.method(JMod.PUBLIC, jCodeModel.VOID, "fillFromItem");
			JVar setValuesFromItemParam = setValuesFromItem.param(Item.class,
					CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, className) + "Item");
			JForEach setValuesFromItemForEachField = setValuesFromItem.body().forEach(
					jCodeModel.ref(FieldValuesView.class), "field", setValuesFromItemParam.invoke("getFields"));
			JSwitch setValuesFromItemSwitch = setValuesFromItemForEachField.body()._switch(
					setValuesFromItemForEachField.var().invoke("getId"));
			setValuesFromItemSwitch
					._default()
					.body()
					.directStatement(
							"System.out.println(\"ERROR: unexpected field id=\"+field.getId() (App: \"+this.getClass().getName()+\"");
			setValuesFromItemSwitch._default().body()._break();

			// getItemCreate method:
			getItemCreate = jc.method(JMod.PUBLIC, jCodeModel._ref(ItemCreate.class), "fillFromItem");
			getItemCreate
					.javadoc()
					.add("As {@link ItemCreate} inherits from {@link ItemUpdate} this method can be used to generate updates!");
			itemCreateResult = getItemCreate.body().decl(jCodeModel.ref(ItemCreate.class), "result",
					JExpr._new(jCodeModel.ref(ItemCreate.class)));
			itemCreateFieldValues = getItemCreate.body().decl(
					jCodeModel.ref(List.class).narrow(FieldValuesUpdate.class), "fieldValuesList",
					JExpr._new(jCodeModel.ref(ArrayList.class).narrow(FieldValuesUpdate.class)));

			// Default constructor:
			jc.constructor(JMod.PUBLIC);

			// itemConstructor:
			constructorFromItem = jc.constructor(JMod.PUBLIC);
			JVar constructorFromItemParam = constructorFromItem.param(Item.class,
					CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, className) + "Item");
			constructorFromItem.body().invoke(setValuesFromItem).arg(constructorFromItemParam);

			// add internal podio id and revision:
			JMember podioId = addMember(jc, "PodioId", jCodeModel.ref(Integer.class),
					"This represents the internal Podio id of the item.", jCodeModel);
			JMember podioRevision = addMember(jc, "PodioRevision", jCodeModel.ref(Integer.class),
					"This represents the internal Podio revision of the item.", jCodeModel);
			setValuesFromItem.body().assign(podioId.getField(), setValuesFromItemParam.invoke("getId"));
			setValuesFromItem.body().assign(podioRevision.getField(),
					setValuesFromItemParam.invoke("getCurrentRevision").invoke("getRevision"));

			for (ApplicationField f : app.getFields()) {
				String name = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, f.getExternalId().toLowerCase());
				PodioType type = PodioType.forApplicationFieldType(f.getType());

				String javadoc = f.getConfiguration().getDescription();
				if (type.equals(PodioType.UNDEFINED)) {
					javadoc = javadoc == null ? FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC : javadoc + "\n"
							+ FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC;
				}
				JMember field = addMember(jc, name, getType(type), javadoc, jCodeModel);

				// add setValuesFromItem part:
				JCase jcase = setValuesFromItemSwitch._case(JExpr.lit(f.getId()));
				jcase.body().invoke("set" + name).arg(createGetFieldValue(type, setValuesFromItemForEachField.var()));
				jcase.body()._break();

				// add getItemCreate part:
				JExpression fieldValueUpdate = createFieldValuesUpdate(field.getGetter(), type, f);
				if (fieldValueUpdate != null) {
					getItemCreate.body().add(itemCreateFieldValues.invoke("add").arg(fieldValueUpdate));
				}
			}

			getItemCreate.body().add(itemCreateResult.invoke("setFields").arg(itemCreateFieldValues));
			getItemCreate.body()._return(itemCreateResult);

			jCodeModel.build(new File("."));

		} catch (JClassAlreadyExistsException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private JType getType(PodioType type) {
		JType result;
		switch (type) {
		case MONEY:
			result = currencyClass;
			break;

		default:
			result = jCodeModel.ref(type.getJavaType());
			break;
		}
		return result;
	}

	/**
	 * JavaType -> Item
	 * 
	 * @param getter
	 * @param type
	 *            (return-)type of {@code getter}
	 * @param f
	 *            corresponds to (field of) {@code getter}
	 * @return an {@link JExpression} that evaluates to a
	 *         {@link FieldValuesUpdate} containing the return value of
	 *         {@code getter}. If the field type is not supported, returns
	 *         {@code null}.
	 */
	private JExpression createFieldValuesUpdate(JMethod getter, PodioType type, ApplicationField f) {
		switch (type) {
		case TEXT:
		case NUMBER:
			return JExpr._new(jCodeModel.ref(FieldValuesUpdate.class)).arg(f.getExternalId()).arg("value")
					.arg(JExpr.invoke(getter));
		case MONEY:
			return JExpr.invoke(getter).invoke("getFieldValuesUpdate").arg(JExpr.lit(f.getExternalId()));
		default:
			break;
		}
		return null;
	}

	/**
	 * Item -> JavaType
	 * 
	 * @param type
	 * @param jVar
	 *            is expected to be of type {@link FieldValuesView}
	 * @return an {@link JExpression} that evaluates to the value represented in
	 *         {@code jVar} and is of type {@link type#getJavaType()}.
	 */
	private JExpression createGetFieldValue(PodioType type, JVar jVar) {
		switch (type) {
		case TEXT:
			return createGetStringFieldValue(jVar, "value");
		case NUMBER:
			return createGetDoubleFieldValue(jVar);
		case MONEY:
			return createGetCurrencyFieldValue(jVar);
		case DATE:
			return createGetDateFieldValue(jVar);
		case APP:
			// TODO: ((Map<String, Map<String, Integer>>)
			// field.getValues().get(0)).get("value").get("item_id")
		case CATEGORY:
			// TODO: (Integer) ((Map<String, ?>)
			// field.getValues().get(0).get("value")).get("id")
		default:
			System.out.println("WARNING: could not create getFieldValueExpression for type: " + type);
			return JExpr._null();
		}
	}

	/**
	 * @param jVar
	 *            needs to be of type {@link FieldValuesView}.
	 * @return
	 */
	private JExpression createGetCurrencyFieldValue(JVar jVar) {
		return JExpr._new(currencyClass).arg(createGetDoubleFieldValue(jVar))
				.arg(createGetStringFieldValue(jVar, "currency"));
	}

	private JExpression createGetDateFieldValue(JVar jVar) {
		setValuesFromItem._throws(ParseException.class);
		constructorFromItem._throws(ParseException.class);
		JExpression exp = createGetStringFieldValue(jVar, "start_date");
		// 2011-12-31 11:27:10
		return podioDateFormatter.invoke("parse").arg(exp);
	}

	/**
	 * @param jVar
	 *            needs to be of type {@link FieldValuesView}.
	 * @return
	 */
	private JExpression createGetStringFieldValue(JVar jVar, String field) {
		return JExpr.cast(jCodeModel._ref(String.class), jVar.invoke("getValues").invoke("get").arg(JExpr.lit(0))
				.invoke("get").arg(field));
	}

	/**
	 * @param jVar
	 *            needs to be of type {@link FieldValuesView}.
	 * @return
	 */
	private JExpression createGetDoubleFieldValue(JVar jVar) {
		// Double.parseDouble((String) field.getValues().get(0).get("value")
		return jCodeModel.ref(Double.class).staticInvoke("parseDouble").arg(createGetStringFieldValue(jVar, "value"));
	}

	/**
	 * Adds field to class, including setter and getter.
	 * 
	 * @param jc
	 * @param name
	 *            of field in upper camel case
	 * @param type
	 * @param javadoc
	 *            is added to variable, setter and getter. Might be {@code null}
	 *            .
	 * @param jCodeModel
	 * @return a reference to the field and its getter and setter
	 * @see CaseFormat#UPPER_CAMEL
	 */
	public static JMember addMember(JDefinedClass jc, String name, JType type, String javadoc, JCodeModel jCodeModel) {
		String nameLowerCamelCase = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, name);

		// add member:
		JFieldVar var = jc.field(JMod.PROTECTED, type, nameLowerCamelCase);

		// add getter:
		JMethod getter = jc.method(JMod.PUBLIC, type, "get" + name);
		JBlock returnBlock = getter.body();
		returnBlock._return(var);

		// add setter:
		JMethod setter = jc.method(JMod.PUBLIC, jCodeModel.VOID, "set" + name);
		JVar param = setter.param(type, nameLowerCamelCase);
		JBlock setterBlock = setter.body();
		setterBlock.assign(JExpr._this().ref(var), param);

		if (javadoc != null) {
			var.javadoc().add(javadoc);
			getter.javadoc().add(javadoc);
			setter.javadoc().add(javadoc);
		}

		return new JMember(var, getter, setter);
	}

	public static void printApp(Application app) {
		System.out.println("AppId=" + app.getId());
		System.out.println("AppExternalId=" + app.getConfiguration().getExternalId());
		System.out.println("AppName=" + app.getConfiguration().getName());
		System.out.println("AppItemName=" + app.getConfiguration().getItemName());
		System.out.println("FIELDS:");
		for (ApplicationField appField : app.getFields()) {
			printAppField(appField);
			System.out.println();
		}
	}

	public static void printAppField(ApplicationField appField) {
		System.out.println("FieldId=" + appField.getId());
		System.out.println("FieldExternalId=" + appField.getExternalId());
		System.out.println("FieldDescription=" + appField.getConfiguration().getDescription());
		System.out.println("FieldLabel=" + appField.getConfiguration().getLabel());
		System.out.println("FieldIsRequired=" + appField.getConfiguration().isRequired());
		if (appField.getConfiguration().getSettings() != null) {
			System.out.println("FieldAllowedValues=" + appField.getConfiguration().getSettings().getAllowedValues());
			System.out.println("FieldAllowedCurrencies="
					+ appField.getConfiguration().getSettings().getAllowedCurrencies());
			System.out.println("FieldReferenceableTypes="
					+ appField.getConfiguration().getSettings().getReferenceableTypes());
			System.out.println("FieldTextFieldSize=" + appField.getConfiguration().getSettings().getSize());
		}
		System.out.println("FieldType=" + appField.getType().toString());

	}

}
