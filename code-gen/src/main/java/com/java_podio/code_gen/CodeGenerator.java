package com.java_podio.code_gen;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import com.google.common.base.CaseFormat;
import com.podio.app.Application;
import com.podio.app.ApplicationField;
import com.podio.item.FieldValuesView;
import com.podio.item.Item;
import com.sun.codemodel.JBlock;
import com.sun.codemodel.JCase;
import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JExpression;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JForEach;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JSwitch;
import com.sun.codemodel.JVar;

public class CodeGenerator {

	private static final String FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC = "Field is of unsupportet type and is not parsed, hence always {@code null}!";

	JCodeModel jCodeModel;

	JFieldVar podioDateFormatter;

	/**
	 * Constructor - constructing an object from an {@link Item}.
	 */
	JMethod itemConstructor;

	public CodeGenerator() {
	}

	// TODO add Enum for categorys

	// TODO add tag handling

	// TODO store original item?!

	// TODO move fromItem from constructor to method

	// TODO Add link to elment?

	public void generateCode(Application app) {
		printApp(app);

		jCodeModel = new JCodeModel();
		JPackage jp = jCodeModel._package("com.podio.generated");

		try {

			String className = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, app.getConfiguration().getName().toLowerCase());
			JDefinedClass jc = jp._class(className);

			JDocComment jDocComment = jc.javadoc();
			jDocComment.add("Wrapper for podio app '" + app.getConfiguration().getName() + "' (id=" + app.getId() + ")\nGenerated by java-podio-code-gen.");

			// APP ID:
			jc.field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL, Integer.class, "APP_ID", JExpr.lit(app.getId()));
			// APP External ID:
			jc.field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL, String.class, "APP_EXTERNAL_ID", JExpr.lit(app.getConfiguration().getExternalId() == null ? "" : app.getConfiguration().getExternalId()));

			podioDateFormatter = jc.field(JMod.PROTECTED | JMod.STATIC | JMod.FINAL, SimpleDateFormat.class, "PODIO_DATE_FORMATTER", JExpr.direct("new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")"));

			// TODO mark deleted elements as deprecated?!

			// TODO add podio item title?!

			// TODO add field ids (id/externalId)?

			// Default constructor:
			jc.constructor(JMod.PUBLIC);

			itemConstructor = jc.constructor(JMod.PUBLIC);
			JVar itemConstructorParam = itemConstructor.param(Item.class, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, className) + "Item");
			JForEach constructorForEachField = itemConstructor.body().forEach(jCodeModel.ref(FieldValuesView.class), "field", itemConstructorParam.invoke("getFields"));
			JSwitch constructorSwitch = constructorForEachField.body()._switch(constructorForEachField.var().invoke("getId"));
			constructorSwitch._default().body().directStatement("System.out.println(\"ERROR: unexpected field id=\"+field.getId() (App: \"+this.getClass().getName()+\"");
			constructorSwitch._default().body()._break();

			// add internal podio id and revision:
			JFieldVar podioId = addMember(jc, "PodioId", Integer.class, "This represents the internal Podio id of the item.");
			JFieldVar podioRevision = addMember(jc, "PodioRevision", Integer.class, "This represents the internal Podio revision of the item.");
			itemConstructor.body().assign(podioId, itemConstructorParam.invoke("getId"));
			itemConstructor.body().assign(podioRevision, itemConstructorParam.invoke("getCurrentRevision").invoke("getRevision"));

			for (ApplicationField f : app.getFields()) {
				String name = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, f.getExternalId().toLowerCase());
				PodioType type = PodioType.forApplicationFieldType(f.getType());

				String javadoc = f.getConfiguration().getDescription();
				if (type.equals(PodioType.UNDEFINED)) {
					javadoc = javadoc == null ? FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC : javadoc + "\n" + FIELD_IS_OF_UNSUPPORTET_TYPE_JAVADOC;
				}
				addMember(jc, name, type.getJavaType(), javadoc);

				// add constructor part:
				JCase jcase = constructorSwitch._case(JExpr.lit(f.getId()));
				jcase.body().invoke("set" + name).arg(createGetFieldValue(type, constructorForEachField.var()));
				jcase.body()._break();

				// TODO add convertToUpdateItem part
				// TODO add convertToCreateItem part
			}

			jCodeModel.build(new File("."));

		} catch (JClassAlreadyExistsException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * @param type
	 * @param jVar
	 *            is expected to be of type {@link FieldValuesView}
	 * @return an {@link JExpression} that evaluates to the value represented in {@code jVar} and is of type {@link type#getJavaType()}.
	 */
	private JExpression createGetFieldValue(PodioType type, JVar jVar) {
		switch (type) {
			case TEXT:
				return createGetStringFieldValue(jVar, "value");
			case NUMBER:
			case MONEY:
				return createGetDoubleFieldValue(jVar);
			case DATE:
				return createGetDateFieldValue(jVar);
			case APP:
				// TODO: ((Map<String, Map<String, Integer>>) field.getValues().get(0)).get("value").get("item_id")
			case CATEGORY:
				// TODO: (Integer) ((Map<String, ?>) field.getValues().get(0).get("value")).get("id")
			default:
				System.out.println("ERROR: could not create getFieldValueExpression for type: " + type);
				return JExpr._null();
		}
	}

	private JExpression createGetDateFieldValue(JVar jVar) {
		itemConstructor._throws(ParseException.class);
		JExpression exp = createGetStringFieldValue(jVar, "start_date");
		// 2011-12-31 11:27:10
		return podioDateFormatter.invoke("parse").arg(exp);
	}

	/**
	 * @param jVar
	 *            needs to be of type {@link FieldValuesView}.
	 * @return
	 */
	private JExpression createGetStringFieldValue(JVar jVar, String field) {
		return JExpr.cast(jCodeModel._ref(String.class), jVar.invoke("getValues").invoke("get").arg(JExpr.lit(0)).invoke("get").arg(field));
	}

	/**
	 * @param jVar
	 *            needs to be of type {@link FieldValuesView}.
	 * @return
	 */
	private JExpression createGetDoubleFieldValue(JVar jVar) {
		// Double.parseDouble((String) field.getValues().get(0).get("value")
		return jCodeModel.ref(Double.class).staticInvoke("parseDouble").arg(createGetStringFieldValue(jVar, "value"));
	}

	/**
	 * Adds field to class, including setter and getter.
	 * 
	 * @param jc
	 * @param name
	 *            of field in upper camel case
	 * @param type
	 * @param javadoc
	 *            is added to variable, setter and getter. Might be {@code null} .
	 * @return a reference to the field
	 * @see CaseFormat#UPPER_CAMEL
	 */
	private JFieldVar addMember(JDefinedClass jc, String name, Class<? extends Object> type, String javadoc) {
		String nameLowerCamelCase = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, name);

		// add member:
		JFieldVar var = jc.field(JMod.PROTECTED, type, nameLowerCamelCase);

		// add getter:
		JMethod getter = jc.method(JMod.PUBLIC, type, "get" + name);
		JBlock returnBlock = getter.body();
		returnBlock._return(var);

		// add setter:
		JMethod setter = jc.method(JMod.PUBLIC, jCodeModel.VOID, "set" + name);
		JVar param = setter.param(type, nameLowerCamelCase);
		JBlock setterBlock = setter.body();
		setterBlock.assign(JExpr._this().ref(var), param);

		if (javadoc != null) {
			var.javadoc().add(javadoc);
			getter.javadoc().add(javadoc);
			setter.javadoc().add(javadoc);
		}

		return var;
	}

	public static void printApp(Application app) {
		System.out.println("AppId=" + app.getId());
		System.out.println("AppExternalId=" + app.getConfiguration().getExternalId());
		System.out.println("AppName=" + app.getConfiguration().getName());
		System.out.println("AppItemName=" + app.getConfiguration().getItemName());
		System.out.println("FIELDS:");
		for (ApplicationField appField : app.getFields()) {
			printAppField(appField);
			System.out.println();
		}
	}

	public static void printAppField(ApplicationField appField) {
		System.out.println("FieldId=" + appField.getId());
		System.out.println("FieldExternalId=" + appField.getExternalId());
		System.out.println("FieldDescription=" + appField.getConfiguration().getDescription());
		System.out.println("FieldLabel=" + appField.getConfiguration().getLabel());
		System.out.println("FieldIsRequired=" + appField.getConfiguration().isRequired());
		if (appField.getConfiguration().getSettings() != null) {
			System.out.println("FieldAllowedValues=" + appField.getConfiguration().getSettings().getAllowedValues());
			System.out.println("FieldAllowedCurrencies=" + appField.getConfiguration().getSettings().getAllowedCurrencies());
			System.out.println("FieldReferenceableTypes=" + appField.getConfiguration().getSettings().getReferenceableTypes());
			System.out.println("FieldTextFieldSize=" + appField.getConfiguration().getSettings().getSize());
		}
		System.out.println("FieldType=" + appField.getType().toString());

	}

}
